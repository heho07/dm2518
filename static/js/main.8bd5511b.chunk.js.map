{"version":3,"sources":["Homescreen/keys.js","Homescreen/Send.jsx","Homescreen/Receive.jsx","Homescreen/Homescreen.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["keys","publish","subscribe","Send","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","_this2","react_default","a","createElement","react_onsenui","style","fontFamily","getDirectionOfDevice","onSubmit","onSend","value","onChange","event","setState","target","modifier","placeholder","onClick","backgroundColor","marginTop","Component","Receive","messages","map","m","index","key","message","direction","content","Homescreen","orientation","messagesToDisplay","pubnub","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","window","addEventListener","console","log","alpha","bind","channels","withPresence","getMessage","msg","push","unsubscribe","z","channel","_this3","onPreChange","_ref","onPostChange","onReactive","position","renderTabs","activeIndex","tabbar","Send_Send","send","tab","label","icon","Receive_Receive","App","src_Homescreen_Homescreen","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bd5511b.chunk.js","sourcesContent":["var keys = {\r\n\tpublish:'pub-c-5f7cd7fc-4b91-4c69-a77e-42f3f5078a66',\r\n\tsubscribe:'sub-c-9e229f4a-6802-11e9-81d5-56c3556875f9'\r\n}\r\nexport default keys;","import React, { Component } from 'react';\r\nimport PubNubReact from 'pubnub-react';\r\nimport keys from \"./keys\";\r\n \r\nimport * as Ons from \"react-onsenui\"; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from \"onsenui\"; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport \"onsenui/css/onsenui.css\";\r\nimport \"onsenui/css/onsen-css-components.css\";\r\n\r\nexport default class Send extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text:\"Write your message here!\"\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            \r\n          <Ons.Page>\r\n              <center>\r\n                <p>Sending messages to the</p>\r\n                <h1 style = {{fontFamily:\"Lucida Sans Typewriter\"}} >{this.props.getDirectionOfDevice()}</h1>\r\n                <hr/>\r\n                <form onSubmit = {() =>this.props.onSend(this.state.text)} >\r\n                    <Ons.Input\r\n                        value = {this.state.text}\r\n                        onChange = {(event) => { this.setState({text: event.target.value})} }\r\n                        modifier= 'material'\r\n                        placeholder= 'Username'\r\n                    />\r\n                </form>\r\n                <Ons.Button onClick = {() => this.props.onSend(this.state.text)} style = {{backgroundColor:\"black\", marginTop:\"1em\"}}>Send message!</Ons.Button>\r\n            </center>\r\n        </Ons.Page>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PubNubReact from 'pubnub-react';\r\nimport keys from \"./keys\";\r\n \r\nimport * as Ons from \"react-onsenui\"; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from \"onsenui\"; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport \"onsenui/css/onsenui.css\";\r\nimport \"onsenui/css/onsen-css-components.css\";\r\n\r\nexport default class Receive extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n          <Ons.Page>\r\n            <center>\r\n                <p>Receiving messages from the</p>\r\n                <h1 style = {{fontFamily:\"Lucida Sans Typewriter\"}}>{this.props.getDirectionOfDevice()}</h1>\r\n                <hr/>\r\n            </center>\r\n            <ul>\r\n                {this.props.messages.map((m, index) => <li key={'message' + index}><b>{m.message.direction}</b> {\": \" +m.message.content }</li>)}\r\n            </ul>\r\n        </Ons.Page>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PubNubReact from 'pubnub-react';\r\nimport keys from \"./keys\";\r\n \r\nimport Send from \"./Send\";\r\nimport Receive from \"./Receive\";\r\n\r\nimport * as Ons from \"react-onsenui\"; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from \"onsenui\"; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport \"onsenui/css/onsenui.css\";\r\nimport \"onsenui/css/onsen-css-components.css\";\r\n\r\nclass Homescreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          orientation: \"funkar inte om detta Ã¤r kvar\",\r\n          messages:[],\r\n\r\n          messagesToDisplay:[],\r\n        };\r\n        this.pubnub = new PubNubReact({\r\n            publishKey: keys.publish,\r\n            subscribeKey: keys.subscribe\r\n        });\r\n        this.pubnub.init(this);\r\n        window.addEventListener('deviceorientation', function(event) {\r\n          console.log(this);\r\n          this.setState({\r\n            orientation:event.alpha,\r\n          });\r\n        }.bind(this));\r\n    }\r\n \r\n    componentWillMount() {\r\n      console.log(keys);\r\n        this.pubnub.subscribe({\r\n            channels: ['channel1'],\r\n            withPresence: true\r\n        });\r\n        let z = this.state.orientation;\r\n        this.pubnub.getMessage('channel1', (msg) => {\r\n            console.log(msg);\r\n            this.state.messages.push(msg);\r\n            \r\n            if (msg.message.direction === this.getDirectionOfDevice() && msg.message.direction !== \"Unknown\") {\r\n              this.state.messagesToDisplay.push(msg);\r\n            }\r\n            else{\r\n              console.log(\"unknown direction :/\");\r\n            }\r\n        });\r\n \r\n    }\r\n \r\n    componentWillUnmount() {\r\n        this.pubnub.unsubscribe({\r\n            channels: ['channel1']\r\n        });\r\n    }\r\n\r\n    getDirectionOfDevice(){\r\n      let z = this.state.orientation;\r\n      let direction;\r\n      if (315<=z || z<=45){\r\n          direction = \"North\";\r\n      }\r\n      else if ( 45<z && z<=135 ){\r\n        direction = \"East\";\r\n      }\r\n      else if (135<z && z<=225){\r\n        direction = \"South\";\r\n      }\r\n      else if ( 225<z && z <315){\r\n        direction = \"West\";\r\n      }\r\n      else{\r\n        console.log(\"default i switch case: z Ã¤r \" + z);\r\n        direction = \"Unknown\";\r\n      }\r\n      return direction;\r\n    }\r\n\r\n \r\n    send(msg){\r\n        console.log(msg);\r\n        let direction = this.getDirectionOfDevice();\r\n        this.pubnub.publish({\r\n          message: {\r\n            content:msg,\r\n            direction:direction,\r\n          },\r\n          channel: 'channel1',          \r\n        });\r\n        console.log(this.state.messages);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        // const messages = this.pubnub.getMessage('channel1');\r\n\r\n        return (\r\n            \r\n          <Ons.Page>\r\n            <Ons.Tabbar\r\n              onPreChange={({ index }) => this.setState({ index: index })}\r\n              onPostChange={() => console.log(\"postChange\")}\r\n              onReactive={() => console.log(\"postChange\")}\r\n              position=\"bottom\"\r\n              index={this.state.index}\r\n              renderTabs={(activeIndex, tabbar) => [\r\n                {\r\n                  content: (\r\n                    <Ons.Page key=\"Send\">\r\n                     <Send \r\n                      onSend = {(msg) => this.send(msg)} \r\n                      getDirectionOfDevice = {() => this.getDirectionOfDevice()}\r\n                    />\r\n                    \r\n                    </Ons.Page>\r\n                  ),\r\n                  tab: <Ons.Tab label=\"Send\" icon=\"fa-volume-up\" key=\"SendTab\" />\r\n                },\r\n                {\r\n                  content: (\r\n                    <Ons.Page key=\"Receive\">\r\n                      <Receive \r\n                        messages = { \r\n                          (this.getDirectionOfDevice() === \"Unknown\") ?\r\n                            this.state.messages : this.state.messagesToDisplay\r\n                          } \r\n                        orientation = {this.state.orientation} \r\n                        getDirectionOfDevice = {() => this.getDirectionOfDevice()}\r\n                        />\r\n                    </Ons.Page>\r\n                  ),\r\n                  tab: <Ons.Tab label=\"Receive\" icon=\"fa-eye\" key=\"ReceiveTab\" />\r\n                }\r\n              ]}\r\n            />\r\n        </Ons.Page>\r\n        );\r\n    }\r\n}\r\n                \r\n// initializes the geolocated thing and sets Homescreen aas it's child\r\nexport default Homescreen;","import React, { Component } from 'react';\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport Homescreen from \"./Homescreen/Homescreen\";\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Homescreen/>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(  \r\n\t<HashRouter>\r\n    \t<App />\r\n  \t</HashRouter>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}