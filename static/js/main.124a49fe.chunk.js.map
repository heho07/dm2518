{"version":3,"sources":["Homescreen/keys.js","Homescreen/Homescreen.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["keys","publish","subscribe","Homescreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","orientation","pubnub","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","window","addEventListener","event","console","log","setState","alpha","bind","_this2","channels","withPresence","getMessage","msg","getStatus","st","message","channel","unsubscribe","DeviceOrientationEvent","_this3","messages","react_default","a","createElement","onClick","testSend","map","m","index","key","Component","App","Homescreen_Homescreen","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAIeA,EAJJ,CACVC,QAAQ,6CACRC,UAAU,8CCEUC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAa,mCAEfR,EAAKS,OAAS,IAAIC,IAAY,CAC1BC,WAAYhB,EAAKC,QACjBgB,aAAcjB,EAAKE,YAEvBG,EAAKS,OAAOI,KAAZZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACAe,OAAOC,iBAAiB,oBAAqB,SAASC,GACpDC,QAAQC,IAAIhB,MACZA,KAAKiB,SAAS,CACZZ,YAAYS,EAAMI,SAGpBC,KAN2CrB,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,MAV9BA,oFAmBE,IAAAuB,EAAApB,KACnBe,QAAQC,IAAIxB,GACVQ,KAAKM,OAAOZ,UAAU,CAClB2B,SAAU,CAAC,YACXC,cAAc,IAGlBtB,KAAKM,OAAOiB,WAAW,WAAY,SAACC,GAChCT,QAAQC,IAAIQ,KAGhBxB,KAAKM,OAAOmB,UAAU,SAACC,GACnBN,EAAKd,OAAOb,QAAQ,CAChBkC,QAAS,yBACTC,QAAS,8DAMjB5B,KAAKM,OAAOuB,YAAY,CACpBR,SAAU,CAAC,iDAMfrB,KAAKM,OAAOb,QAAQ,CAClBkC,QAAS,OACTC,QAAS,aAEXb,QAAQC,IAAIJ,OAAOkB,yDAKd,IAAAC,EAAA/B,KACCgC,EAAWhC,KAAKM,OAAOiB,WAAW,YACxC,OACIU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,QAAW,kBAAML,EAAKM,aAA9B,aACAJ,EAAAC,EAAAC,cAAA,SAAInC,KAAKI,MAAMC,aACf4B,EAAAC,EAAAC,cAAA,UACKH,EAASM,IAAI,SAACC,EAAGC,GAAJ,OAAcP,EAAAC,EAAAC,cAAA,MAAIM,IAAK,UAAYD,GAAQD,EAAEZ,oBA/DvCe,aCkBzBC,kNARX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,cAJUF,cCAEG,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACRjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAD,OAEDC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.124a49fe.chunk.js","sourcesContent":["var keys = {\r\n\tpublish:'pub-c-5f7cd7fc-4b91-4c69-a77e-42f3f5078a66',\r\n\tsubscribe:'sub-c-9e229f4a-6802-11e9-81d5-56c3556875f9'\r\n}\r\nexport default keys;","import React, { Component } from 'react';\r\nimport PubNubReact from 'pubnub-react';\r\nimport keys from \"./keys\";\r\n \r\nexport default class Homescreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          orientation: \"funkar inte om detta Ã¤r kvar\",\r\n        };\r\n        this.pubnub = new PubNubReact({\r\n            publishKey: keys.publish,\r\n            subscribeKey: keys.subscribe\r\n        });\r\n        this.pubnub.init(this);\r\n        window.addEventListener('deviceorientation', function(event) {\r\n          console.log(this);\r\n          this.setState({\r\n            orientation:event.alpha,\r\n          });\r\n          // console.log(event.alpha + ' : ' + event.beta + ' : ' + event.gamma);\r\n        }.bind(this));\r\n    }\r\n \r\n    componentWillMount() {\r\n      console.log(keys);\r\n        this.pubnub.subscribe({\r\n            channels: ['channel1'],\r\n            withPresence: true\r\n        });\r\n \r\n        this.pubnub.getMessage('channel1', (msg) => {\r\n            console.log(msg);\r\n        });\r\n \r\n        this.pubnub.getStatus((st) => {\r\n            this.pubnub.publish({\r\n                message: 'hello world from react',\r\n                channel: 'channel1'\r\n            });\r\n        });\r\n    }\r\n \r\n    componentWillUnmount() {\r\n        this.pubnub.unsubscribe({\r\n            channels: ['channel1']\r\n        });\r\n    }\r\n \r\n    testSend(){\r\n\r\n        this.pubnub.publish({\r\n          message: \"test\",\r\n          channel: 'channel1'\r\n        });\r\n        console.log(window.DeviceOrientationEvent);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const messages = this.pubnub.getMessage('channel1');\r\n        return (\r\n            <div>\r\n                <button onClick = {() => this.testSend()}>test send</button>\r\n                <p>{this.state.orientation}</p>\r\n                <ul>\r\n                    {messages.map((m, index) => <li key={'message' + index}>{m.message}</li>)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport Homescreen from \"./Homescreen/Homescreen\";\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Homescreen/>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(  \r\n\t<HashRouter>\r\n    \t<App />\r\n  \t</HashRouter>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}