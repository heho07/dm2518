{"version":3,"sources":["Karta/Karta.js","Homescreen/Homescreen.js","App.js","serviceWorker.js","index.js"],"names":["Karta","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","markers","isFull","window","google","maps","Map","document","getElementById","center","lat","lng","zoom","mapTypeId","tilt","gestureHandling","zoomControl","setState","number","console","log","currentZoom","getZoom","setZoom","x","y","panBy","dragBoolean","Marker","position","getCenter","draggable","_this2","react_default","a","createElement","dist_default","enabled","onChange","onClick","goFull","id","style","width","innerWidth","height","innerHeight","className","createMarker","Component","Homescreen","react_router_dom","to","App","react_router","exact","path","component","render","src_Karta_Karta","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTA4FeA,qBAtFb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,IAAI,KACJC,QAAQ,GACRC,QAAQ,GALMV,mFAUhB,IAAMQ,EAAM,IAAIG,OAAOC,OAAOC,KAAKC,IAAIC,SAASC,eAAe,OAAQ,CACrEC,OAAQ,CAACC,IAAK,WAAYC,IAAK,YAC/BC,KAAM,GACNC,UAAW,SACXC,KAAM,GACNC,gBAAiB,OACjBC,aAAa,IAEfrB,KAAKsB,SAAS,CAACjB,IAAIA,iCAIhBkB,GACHC,QAAQC,IAAI,SACZ,IAAIC,EAAc1B,KAAKI,MAAMC,IAAIsB,UACjC3B,KAAKI,MAAMC,IAAIuB,QAAQF,EAAcH,iCAGjCM,EAAGC,GACP9B,KAAKI,MAAMC,IAAI0B,MAAMF,EAAGC,wCAGbE,GACE,IAAIxB,OAAOC,OAAOC,KAAKuB,OAAO,CACzCC,SAASlC,KAAKI,MAAMC,IAAI8B,YACxB9B,IAAIL,KAAKI,MAAMC,IACf+B,UAAUJ,qCAKZhC,KAAKsB,SAAS,CAAEf,QAAQ,qCAGjB,IAAA8B,EAAArC,KAEP,OACEsC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAYG,QAAS1C,KAAKI,MAAMG,OAAQoC,SAAU,SAAApC,GAAM,OAAI8B,EAAKf,SAAS,CAACf,aAC3E+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,kBAAMP,EAAKQ,WAA5B,iBAKAP,EAAAC,EAAAC,cAAA,OAAKM,GAAG,MAAMC,MAAO,CAACC,MAAMxC,OAAOyC,WAAW,GAAIC,OAAO1C,OAAO2C,YAAc,OAE9Eb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WAAWN,GAAG,SAC3BR,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKpB,KAAK,KAAIqB,EAAAC,EAAAC,cAAA,KAAGY,UAAU,iBAEtDd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WAAWN,GAAG,SAC3BR,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKpB,MAAM,KAAIqB,EAAAC,EAAAC,cAAA,KAAGY,UAAU,mBAGzDd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACfd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,IACbd,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKN,MAAM,GAAI,MAAKO,EAAAC,EAAAC,cAAA,KAAGY,UAAU,sBAG9Dd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKN,OAAO,GAAI,KAAIO,EAAAC,EAAAC,cAAA,KAAGY,UAAU,sBAC1Dd,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKN,MAAM,GAAI,KAAIO,EAAAC,EAAAC,cAAA,KAAGY,UAAU,wBAE3Dd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKN,MAAM,EAAG,MAAKO,EAAAC,EAAAC,cAAA,KAAGY,UAAU,uBAE3Dd,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKgB,cAAa,KAA3C,oBACAf,EAAAC,EAAAC,cAAA,UAAQI,QAAW,kBAAMP,EAAKgB,cAAa,KAA3C,+BAhFYC,cCcLC,mLATX,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAK,UAAX,OACAnB,EAAAC,EAAAC,cAAA,yBATiBc,aCkBVI,0LAbX,OACEpB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAChBd,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjCjB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAO,SAASE,OAAU,kBAAMzB,EAAAC,EAAAC,cAACwB,EAAD,SACvC1B,EAAAC,EAAAC,cAAA,0BAPQc,cCMEW,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACRzB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAAC8B,EAAD,OAED1D,SAASC,eAAe,SDsHtB,kBAAmB0D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3bbe5064.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Fullscreen from \"react-full-screen\";\nimport \"./Karta.css\";\n\nclass Karta extends Component {\n    \n  constructor(props){\n    super(props);\n    this.state = {\n      map:null,\n      markers:[],\n      isFull: false,\n    }\n  }\n  \n  componentDidMount(){\n    const map = new window.google.maps.Map(document.getElementById('map'), {\n      center: {lat: 59.3498092, lng: 18.0684758},\n      zoom: 15,\n      mapTypeId: 'hybrid',\n      tilt: 45,\n      gestureHandling: 'none',\n      zoomControl: false\n    });\n    this.setState({map:map});\n\n  }\n\n  zoom(number){\n    console.log(\"empty\");\n    let currentZoom = this.state.map.getZoom();\n    this.state.map.setZoom(currentZoom + number);\n  }\n\n  panBy(x, y){\n    this.state.map.panBy(x, y);\n  }\n\n  createMarker(dragBoolean){\n    let marker = new window.google.maps.Marker({\n      position:this.state.map.getCenter(),\n      map:this.state.map,\n      draggable:dragBoolean,\n    });\n  }\n\n  goFull(){\n    this.setState({ isFull: true });\n  }\n\n  render() {\n\n    return (\n      <Fullscreen enabled={this.state.isFull} onChange={isFull => this.setState({isFull})}>\n      <div>\n        <button onClick={() => this.goFull()}>\n          Go Fullscreen\n        </button>\n\n\n        <div id=\"map\" style={{width:window.innerWidth-20, height:window.innerHeight - 100}}>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-1\" id=\"inner\">\n            <button onClick = {() => this.zoom(1)}><i className=\"fa fa-plus\"></i></button>\n          </div>\n          <div className=\"col-sm-1\" id=\"inner\">\n            <button onClick = {() => this.zoom(-1)}><i className=\"fa fa-minus\"></i></button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-6\"></div>\n          <div className=\"\">\n            <button onClick = {() => this.panBy(0, -50)}><i className=\"fa fa-arrow-up\"></i></button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <button onClick = {() => this.panBy(-50, 0)}><i className=\"fa fa-arrow-left\"></i></button>\n          <button onClick = {() => this.panBy(50, 0)}><i className=\"fa fa-arrow-right\"></i></button>\n        </div>\n        <div className=\"row\">\n          <button onClick = {() => this.panBy(0, 50)}><i className=\"fa fa-arrow-down\"></i></button>\n        </div>\n        <button onClick = {() => this.createMarker(true)}>Draggable marker</button>\n        <button onClick = {() => this.createMarker(false)}>Undraggable marker</button>\n\n      </div>\n      </Fullscreen>\n    );\n  }\n}\n\nexport default Karta;\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { HashRouter } from \"react-router-dom\";\nclass Homescreen extends Component {\n    \n\n\n  render() {\n\n    return (\n      <div>\n        <Link to = \"/Karta\">Map</Link>\n        <p>test</p>\n      </div>\n    );\n  }\n}\n\nexport default Homescreen;\n","import React, { Component } from 'react';\nimport { Route } from \"react-router-dom\";\nimport Karta from \"./Karta/Karta\";\nimport Homescreen from \"./Homescreen/Homescreen\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Route exact path=\"/\" component={Homescreen} />\n          <Route path = \"/Karta\" render = {() => <Karta/>}/>\n          <p>test</p>\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  \n\t<HashRouter>\n    \t<App />\n  \t</HashRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}