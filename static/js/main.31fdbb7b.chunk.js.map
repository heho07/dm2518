{"version":3,"sources":["Yoga/Yoga.jsx","Meditation/Meditation.jsx","Breathing/Breathing.jsx","About/About.jsx","Homescreen/Homescreen.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Yoga","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","ons","alert","react_default","a","createElement","react_onsenui","onClick","handleClick","Component","Meditation","Breathing","About","Homescreen","_this","dataSource","renderHeader","style","fontSize","className","renderRow","row","idx","key","react_router_dom","to","App","react_router","exact","path","component","render","src_Yoga_Yoga","src_Meditation_Meditation","src_Breathing_Breathing","src_About_About","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31fdbb7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Fullscreen from \"react-full-screen\";\r\nimport \"./Yoga.css\";\r\n\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\n\r\n\r\nclass Yoga extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    // this.state = {\r\n    // }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    // n채r den skapats\r\n  }\r\n\r\n  handleClick(){\r\n    console.log(ons);\r\n    ons.notification.alert('Hello world!');\r\n  }\r\n\r\n  render() {\r\n       \r\n    return (\r\n          <Ons.Page>\r\n            <Ons.Button onClick={this.handleClick}>Tap me!</Ons.Button>\r\n          </Ons.Page>\r\n      );\r\n  }\r\n}\r\n\r\n// initializes the geolocated thing and sets Karta aas it's child\r\nexport default Yoga;\r\n","import React, { Component } from 'react';\r\nimport Fullscreen from \"react-full-screen\";\r\n\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\n\r\n\r\nclass Meditation extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    // this.state = {\r\n    // }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    // n채r den skapats\r\n  }\r\n\r\n  handleClick(){\r\n    console.log(ons);\r\n    ons.notification.alert('Hello world!');\r\n  }\r\n\r\n  render() {\r\n       \r\n    return (\r\n          <Ons.Page>\r\n            <Ons.Button onClick={this.handleClick}>Tap me!</Ons.Button>\r\n          </Ons.Page>\r\n      );\r\n  }\r\n}\r\n\r\n// initializes the geolocated thing and sets Karta aas it's child\r\nexport default Meditation;\r\n","import React, { Component } from 'react';\r\nimport Fullscreen from \"react-full-screen\";\r\n\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\n\r\n\r\nclass Breathing extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    // this.state = {\r\n    // }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    // n채r den skapats\r\n  }\r\n\r\n  handleClick(){\r\n    console.log(ons);\r\n    ons.notification.alert('Hello world!');\r\n  }\r\n\r\n  render() {\r\n       \r\n    return (\r\n          <Ons.Page>\r\n            <Ons.Button onClick={this.handleClick}>Tap me!</Ons.Button>\r\n          </Ons.Page>\r\n      );\r\n  }\r\n}\r\n\r\n// initializes the geolocated thing and sets Karta aas it's child\r\nexport default Breathing;\r\n","import React, { Component } from 'react';\r\nimport Fullscreen from \"react-full-screen\";\r\n\r\n\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\n\r\n\r\nclass About extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    // this.state = {\r\n    // }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    // n채r den skapats\r\n  }\r\n\r\n  handleClick(){\r\n    console.log(ons);\r\n    ons.notification.alert('About!');\r\n  }\r\n\r\n  render() {\r\n       \r\n    return (\r\n          <Ons.Page>\r\n            <Ons.Button onClick={this.handleClick}>Tap me!</Ons.Button>\r\n          </Ons.Page>\r\n      );\r\n  }\r\n}\r\n\r\n// initializes the geolocated thing and sets Karta aas it's child\r\nexport default About;\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\n// imports for OnsenUI\r\nimport * as Ons from 'react-onsenui'; // Import everything and use it as 'Ons.Page', 'Ons.Button'\r\nimport * as ons from 'onsenui'; // This needs to be imported to bootstrap the components.\r\n// Webpack CSS import\r\nimport 'onsenui/css/onsenui.css';\r\nimport 'onsenui/css/onsen-css-components.css';\r\n\r\n\r\nclass Homescreen extends Component {\r\n    \r\n\thandleClick(){\r\n\t\t//ons.notification.alert('clicked');\r\n\t}\r\n\r\n  render() {\r\n//<h1>Welcome to The Map App!</h1>\r\n  //      <h3>Click on the map below to start the experience&trade;</h3>\r\n    //    <Link to = \"/Yoga\"><img src={require(\"../images/favicon.png\")}/></Link>\r\n    let data = [\"Yoga\", \"Meditation\", \"Breathing\", \"About\"];\r\n    return (\r\n      <Ons.Page>\r\n\t\t<Ons.List\r\n     \t\tdataSource= {data}\r\n     \t\trenderHeader={() =>\r\n        \t\t<Ons.ListHeader style={{fontSize: 15}} className=\"testClass\"> Header Text </Ons.ListHeader> }\r\n    \t\trenderRow = {(row, idx) => (\r\n      \t\t\t<Ons.ListItem onClick = {() => this.handleClick()} key = {row}> <Link to = {\"/\" + row}> {row} </Link> </Ons.ListItem>\r\n\t\t\t)}\r\n  \t\t/>\t\r\n        \r\n      </Ons.Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homescreen;\r\n","import React, { Component } from 'react';\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport Yoga from \"./Yoga/Yoga\";\r\nimport Meditation from \"./Meditation/Meditation\";\r\nimport Breathing from \"./Breathing/Breathing\";\r\nimport About from \"./About/About\";\r\nimport Homescreen from \"./Homescreen/Homescreen\";\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Route exact path=\"/\" component={Homescreen} />\r\n          <Route path = \"/Yoga\" render = {() => <Yoga/>}/>          \r\n          <Route path = \"/Meditation\" render = {() => <Meditation/>}/>\r\n          <Route path = \"/Breathing\" render = {() => <Breathing/>}/>\r\n          <Route path = \"/About\" render = {() => <About/>}/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(  \n\t<HashRouter>\n    \t<App />\n  \t</HashRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}